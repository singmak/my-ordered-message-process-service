import * as cdk from '@aws-cdk/core';
import * as sns from '@aws-cdk/aws-sns';
import * as lambda from '@aws-cdk/aws-lambda';
import * as apigateway from '@aws-cdk/aws-apigateway';
import * as sqs from '@aws-cdk/aws-sqs';
import * as snsSubscriptions from '@aws-cdk/aws-sns-subscriptions';
import * as lambdaEventSources from '@aws-cdk/aws-lambda-event-sources';
import { Duration } from '@aws-cdk/core';
export class MyOrderedMessageProcessServiceStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const eventMessageTopic = new sns.Topic(this, 'EventMessageTopic', {
      topicName: 'eventMessages',
      fifo: true,
      contentBasedDeduplication: true,
    });

    // This is optional, you can also publish messages to the SNS topic in any other ways.
    // The Lambda code is set to load from `./lambda/handler.js` (will be generated by `npm run build`)
    // `EVENT_MESSAGE_TOPIC_ARN` is passed into environment variable so that the function can access it
    const publishEventLambda = new lambda.Function(this, 'PublishEventMessage', {
      runtime: lambda.Runtime.NODEJS_14_X,
      code: lambda.Code.fromAsset("./lambda"),
      handler: "handler.publishMessage",
      environment: {
        EVENT_MESSAGE_TOPIC_ARN: eventMessageTopic.topicArn,
      }
    });

    // grant the lambda permission to publish message to the SNS topic
    eventMessageTopic.grantPublish(publishEventLambda);

    // Create the Rest API
    const api = new apigateway.RestApi(this, "MessageApi", {
      restApiName: "messageApi",
      description: "API for publishing messages."
    });
    // Add the path /users in the API
    const apiResource = api.root.addResource("messages");
    const getIntegration = new apigateway.LambdaIntegration(publishEventLambda);
    apiResource.addMethod("POST", getIntegration);

    // create SQS FIFO queue
    const processMessageQueue = new sqs.Queue(this, 'ProcessMessage', {
      queueName: 'processMessage.fifo',
      fifo: true,
    });

    // subscribe to the SNS queue
    eventMessageTopic.addSubscription(new snsSubscriptions.SqsSubscription(processMessageQueue));

    // create the Lambda function and subscribe
    const processEventLambda = new lambda.Function(this, 'ProcessEvent', {
      runtime: lambda.Runtime.NODEJS_14_X,
      code: lambda.Code.fromAsset("./lambda"),
      handler: "handler.processMessage",
      timeout: Duration.seconds(10), // need to be smaller than the visibilityTimeout of the SQS queue
    });
    processEventLambda.addEventSource(new lambdaEventSources.SqsEventSource(processMessageQueue, {
      batchSize: 2
    }));
  }
}
